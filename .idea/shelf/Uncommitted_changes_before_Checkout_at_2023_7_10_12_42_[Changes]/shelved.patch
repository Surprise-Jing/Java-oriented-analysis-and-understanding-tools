Index: staticSlicer/src/main/java/com/nju/boot/slicer/Graphs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nju.boot.slicer;\r\n\r\nimport com.github.javaparser.JavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.BodyDeclaration;\r\nimport com.github.javaparser.ast.body.CallableDeclaration;\r\nimport com.github.javaparser.ast.body.TypeDeclaration;\r\nimport com.github.javaparser.symbolsolver.JavaSymbolSolver;\r\nimport com.github.javaparser.symbolsolver.model.resolution.TypeSolver;\r\nimport com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver;\r\nimport com.nju.boot.graphs.augmented.ACFG;\r\nimport com.nju.boot.graphs.callgraph.CallGraph;\r\nimport com.nju.boot.graphs.cfg.CFG;\r\nimport com.nju.boot.graphs.pdg.PDG;\r\nimport com.nju.boot.nodes.GraphNode;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class Graphs {\r\n    File file = null;\r\n    CompilationUnit cu;\r\n    Map<CallableDeclaration<?>,CFG> cfgMap= new HashMap<>();\r\n    CallGraph callGraph;\r\n    Map<CallableDeclaration<?>, PDG> pdgMap = new HashMap<>();\r\n\r\n\r\n    public Graphs(String filePath) {\r\n        this(new File(filePath));\r\n    }\r\n    public CompilationUnit getCu(){return cu;}\r\n    public Graphs(File fileToSlice) {\r\n        this.file = fileToSlice;\r\n        generateGraphsFromFile();\r\n\r\n    }\r\n    public void generateGraphsFromFile(){\r\n        getCompilationUnit();\r\n        generateCFGandPDG();\r\n        generateCG();\r\n\r\n    }\r\n    private void getCompilationUnit(){\r\n        JavaParser javaParser = new JavaParser();\r\n        TypeSolver typeSolver = new ReflectionTypeSolver();\r\n        JavaSymbolSolver symbolSolver = new JavaSymbolSolver(typeSolver);\r\n        javaParser.getParserConfiguration().setSymbolResolver(symbolSolver);\r\n\r\n        try {\r\n            Optional<CompilationUnit> _cu =  javaParser.parse(file).getResult();\r\n            cu = _cu.orElse(null);\r\n            if (cu==null) throw new RuntimeException(\"ast树生成时发生错误\");\r\n        } catch (FileNotFoundException e) {\r\n            throw new RuntimeException(\"找不到要切片的文件\",e);\r\n        }\r\n    }\r\n    private void generateCFGandPDG(){\r\n        for(TypeDeclaration<?> typeDeclaration: cu.getTypes()){\r\n            for(BodyDeclaration<?> bodyDeclaration : typeDeclaration.getMembers()){\r\n                if(bodyDeclaration instanceof CallableDeclaration<?>){\r\n                    CFG newCFG = new CFG();\r\n                    newCFG.build((CallableDeclaration<?>) bodyDeclaration);\r\n                    cfgMap.put((CallableDeclaration<?>) bodyDeclaration,newCFG);\r\n                    ACFG newACFG  = new ACFG();\r\n                    newACFG.build((CallableDeclaration<?>) bodyDeclaration);\r\n                    PDG pdg = new PDG();\r\n                    pdg.buildFromACFG(newACFG);\r\n                    pdgMap.put((CallableDeclaration<?>) bodyDeclaration,pdg);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    private void generateCG(){\r\n        CallGraph cg = new CallGraph();\r\n        cg.build(cu);\r\n        this.callGraph = cg;\r\n    }\r\n    public CFG getCFG(CallableDeclaration<?> callableDeclaration){\r\n        return cfgMap.get(callableDeclaration);\r\n    }\r\n    public PDG getPDG(CallableDeclaration<?> callableDeclaration){\r\n        return pdgMap.get(callableDeclaration);\r\n    }\r\n    public CallGraph getCallGraph(){\r\n        return this.callGraph;\r\n    }\r\n    public Set<String> getQualifiedSignatures(){\r\n        Map<String, GraphNode<CallableDeclaration<?>>> sigToNodeMap = this.callGraph.getSignatureToNodeMap();\r\n        return sigToNodeMap.keySet().stream().filter(sig->\r\n            sigToNodeMap.get(sig).getAstNode()!=null\r\n        ).collect(Collectors.toSet());\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staticSlicer/src/main/java/com/nju/boot/slicer/Graphs.java b/staticSlicer/src/main/java/com/nju/boot/slicer/Graphs.java
--- a/staticSlicer/src/main/java/com/nju/boot/slicer/Graphs.java	
+++ b/staticSlicer/src/main/java/com/nju/boot/slicer/Graphs.java	
@@ -2,8 +2,10 @@
 
 import com.github.javaparser.JavaParser;
 import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.ast.Node;
 import com.github.javaparser.ast.body.BodyDeclaration;
 import com.github.javaparser.ast.body.CallableDeclaration;
+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
 import com.github.javaparser.ast.body.TypeDeclaration;
 import com.github.javaparser.symbolsolver.JavaSymbolSolver;
 import com.github.javaparser.symbolsolver.model.resolution.TypeSolver;
