Index: backend/src/main/java/com/nju/boot/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nju.boot.controller;\r\n\r\nimport com.nju.boot.entity.Files;\r\nimport com.nju.boot.entity.User;\r\nimport com.nju.boot.entity.dto.LoginDto;\r\nimport com.nju.boot.service.IFilesService;\r\nimport com.nju.boot.service.IUserService;\r\nimport com.nju.boot.utils.JwtTokenUtils;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.apache.catalina.LifecycleState;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.stereotype.Controller;\r\n\r\nimport javax.annotation.Resource;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * <p>\r\n *  前端控制器\r\n * </p>\r\n *\r\n * @author JingYa\r\n * @since 2023-07-06\r\n */\r\n@RestController\r\n@RequestMapping(\"/user\")\r\n@Api(tags = \"用户管理接口\")\r\npublic class UserController {\r\n\r\n    @Resource\r\n    private IUserService iUserService;\r\n\r\n    @Resource\r\n    private IFilesService iFilesService;\r\n\r\n    @PostMapping(\"/login\")\r\n    @ApiOperation(value = \"用户登录\")\r\n    public Map<String, Object> login(@RequestBody LoginDto loginDto) throws Exception{\r\n        User user = iUserService.login(loginDto);\r\n        Map<String, Object> map = new HashMap<>();\r\n        //是否选择记住用户\r\n        long exp = loginDto.isRemember() ? JwtTokenUtils.REMEMBER_EXPIRATION_TIME : JwtTokenUtils.EXPIRATION_TIME;\r\n        map.put(\"token\", JwtTokenUtils.createToken(loginDto.getUsername(), exp));\r\n        map.put(\"user\", user);\r\n        return map;\r\n    }\r\n\r\n    @PostMapping(\"/register\")\r\n    @ApiOperation(value = \"用户注册\")\r\n    public User create(@RequestBody User user) throws Exception{\r\n        return iUserService.create(user);\r\n    }\r\n\r\n    @PutMapping(\"\")\r\n    @ApiOperation(value = \"更新用户\")\r\n    public User updateUser(@RequestBody User user){\r\n        return iUserService.update(user);\r\n    }\r\n\r\n    @GetMapping(\"/file\")\r\n    @ApiOperation(value = \"获得用户上传的所有文件\")\r\n    public List<Files> getUserFiles(@RequestParam(\"uid\") String uid){\r\n        return iFilesService.getFilesByUid(uid);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/nju/boot/controller/UserController.java b/backend/src/main/java/com/nju/boot/controller/UserController.java
--- a/backend/src/main/java/com/nju/boot/controller/UserController.java	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
+++ b/backend/src/main/java/com/nju/boot/controller/UserController.java	(date 1688885886701)
@@ -43,7 +43,7 @@
         User user = iUserService.login(loginDto);
         Map<String, Object> map = new HashMap<>();
         //是否选择记住用户
-        long exp = loginDto.isRemember() ? JwtTokenUtils.REMEMBER_EXPIRATION_TIME : JwtTokenUtils.EXPIRATION_TIME;
+        long exp = JwtTokenUtils.EXPIRATION_TIME;
         map.put("token", JwtTokenUtils.createToken(loginDto.getUsername(), exp));
         map.put("user", user);
         return map;
Index: backend/src/main/java/com/nju/boot/entity/dto/LoginDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nju.boot.entity.dto;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class LoginDto {\r\n    private String username;\r\n\r\n    private String password;\r\n\r\n    private boolean remember;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/nju/boot/entity/dto/LoginDto.java b/backend/src/main/java/com/nju/boot/entity/dto/LoginDto.java
--- a/backend/src/main/java/com/nju/boot/entity/dto/LoginDto.java	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
+++ b/backend/src/main/java/com/nju/boot/entity/dto/LoginDto.java	(date 1688885850241)
@@ -7,6 +7,4 @@
     private String username;
 
     private String password;
-
-    private boolean remember;
 }
Index: backend/file/ebb99e6f-5e50-4c37-bce1-c4a2880cc33f.java
===================================================================
diff --git a/backend/file/ebb99e6f-5e50-4c37-bce1-c4a2880cc33f.java b/backend/file/ebb99e6f-5e50-4c37-bce1-c4a2880cc33f.java
deleted file mode 100644
--- a/backend/file/ebb99e6f-5e50-4c37-bce1-c4a2880cc33f.java	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
+++ /dev/null	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
@@ -1,16 +0,0 @@
-public class CFG_Test2 {
-    public static void main(String[] args) {
-        int a = 1;
-        int b = 2;
-        int c = 3;
-        int d = 4;
-        if(a == b){
-            d = d+1;
-        }
-        else{
-            a = b;
-            c = c+2;
-        }
-        System.out.println(a);
-    }
-}
Index: backend/src/main/java/com/nju/boot/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nju.boot.config;\r\n\r\nimport com.nju.boot.entity.dto.ResponseDto;\r\nimport com.nju.boot.filter.AuthorizationFilter;\r\nimport com.nju.boot.utils.ResponseUtils;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\n\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    /**\r\n     * HTTP验证规则\r\n     *\r\n     * @param http h\r\n     * @throws Exception e\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception{\r\n        //开启跨域\r\n        http.csrf().disable().cors();\r\n\r\n        //允许跨域使用iframe\r\n        http.headers().frameOptions().disable();\r\n\r\n        //禁用session\r\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n\r\n                .and()\r\n                .authorizeRequests()\r\n                // 对于登录接口 允许匿名访问\r\n                .antMatchers(\"/swagger-ui/**\",\"/**/login\",\"/**/register\",\"/**/logout\").permitAll()    //允许全部访问\r\n                // 除上面外的所有请求全部需要鉴权认证\r\n                .anyRequest()   //任何其它请求\r\n                .authenticated();\r\n\r\n        //身份验证失败\r\n        http.exceptionHandling().authenticationEntryPoint((request, response, authException) -> {\r\n            ResponseUtils.writeJson(response, new ResponseDto<>(403, \"身份认证失败, 请重新登录\"));\r\n        });\r\n\r\n        http.addFilter(new AuthorizationFilter(authenticationManagerBean()));\r\n    }\r\n\r\n\r\n    /**\r\n     * SpringSecurity有默认的跨域配置 会无法放行RequestHeader带有\"Authorization\"请求\r\n     * 防止前端请求api报出cors error\r\n     *\r\n     * @return *\r\n     */\r\n    @Bean\r\n    CorsConfigurationSource corsConfigurationSource() {\r\n        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        final CorsConfiguration corsConfiguration = new CorsConfiguration();\r\n        corsConfiguration.addAllowedHeader(\"*\");\r\n        corsConfiguration.addAllowedHeader(\"DELETE\");\r\n        corsConfiguration.addAllowedMethod(\"*\");\r\n        corsConfiguration.addAllowedOrigin(\"*\");\r\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\r\n        return source;\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/nju/boot/config/SecurityConfig.java b/backend/src/main/java/com/nju/boot/config/SecurityConfig.java
--- a/backend/src/main/java/com/nju/boot/config/SecurityConfig.java	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
+++ b/backend/src/main/java/com/nju/boot/config/SecurityConfig.java	(date 1688885125582)
@@ -44,7 +44,8 @@
                 .and()
                 .authorizeRequests()
                 // 对于登录接口 允许匿名访问
-                .antMatchers("/swagger-ui/**","/**/login","/**/register","/**/logout").permitAll()    //允许全部访问
+                .antMatchers("/api/**", "/swagger-ui.html","/webjars/**", "/v2/api-docs", "/swagger-resources/**","/swagger-ui/**",
+                        "/**/login","/**/register","/**/logout").permitAll()    //允许全部访问
                 // 除上面外的所有请求全部需要鉴权认证
                 .anyRequest()   //任何其它请求
                 .authenticated();
Index: backend/src/main/java/com/nju/boot/entity/dto/SlicerDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/nju/boot/entity/dto/SlicerDto.java b/backend/src/main/java/com/nju/boot/entity/dto/SlicerDto.java
new file mode 100644
--- /dev/null	(date 1688883443825)
+++ b/backend/src/main/java/com/nju/boot/entity/dto/SlicerDto.java	(date 1688883443825)
@@ -0,0 +1,11 @@
+package com.nju.boot.entity.dto;
+
+import lombok.Data;
+
+@Data
+public class SlicerDto {
+
+    private Integer lineNumber;
+
+    private String variable;
+}
Index: backend/src/main/java/com/nju/boot/controller/FilesController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nju.boot.controller;\r\n\r\nimport cn.hutool.core.io.FileUtil;\r\nimport cn.hutool.core.util.StrUtil;\r\nimport cn.hutool.crypto.SecureUtil;\r\nimport com.nju.boot.entity.Files;\r\nimport com.nju.boot.graphs.cfg.CFG;\r\nimport com.nju.boot.mapper.FilesMapper;\r\nimport com.nju.boot.service.IFilesService;\r\nimport com.nju.boot.service.impl.FilesServiceImpl;\r\nimport com.nju.boot.utils.DateTimeUtils;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.annotation.Resource;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.time.LocalDateTime;\r\nimport java.util.UUID;\r\n\r\n/**\r\n * <p>\r\n *  前端控制器\r\n * </p>\r\n *\r\n * @author JingYa\r\n * @since 2023-07-07\r\n */\r\n@RestController\r\n@RequestMapping(\"/file\")\r\n@Api(tags = \"文件上传接口\")\r\npublic class FilesController {\r\n\r\n    @Value(\"${files.upload.path}\")\r\n    private String fileUploadPath;\r\n\r\n    @Value(\"${server.port}\")\r\n    private String serverPort;\r\n\r\n    @Value(\"${server.address}\")\r\n    private String serverAddress;\r\n\r\n    @Resource\r\n    private IFilesService iFilesService;\r\n\r\n    @Resource\r\n    private FilesMapper filesMapper;\r\n\r\n    @PostMapping(\"\")\r\n    @ApiOperation(value = \"上传文件\")\r\n    public String uploadFile(@RequestParam(\"uid\") String uid, MultipartFile file) throws Exception {\r\n        if(file == null) throw new Exception(\"请求参数缺失\");\r\n        if(file.isEmpty()){\r\n            throw new Exception(\"上传失败，请选择文件\");\r\n        }\r\n        File uploadParentFile = new File(fileUploadPath);\r\n        if(!uploadParentFile.exists()){\r\n            uploadParentFile.mkdirs();\r\n        }\r\n\r\n        String uuId = UUID.randomUUID().toString();\r\n        String originalFilename = file.getOriginalFilename();\r\n        String type = FileUtil.extName(originalFilename);\r\n        String fileUUID = uuId + StrUtil.DOT + type;\r\n        File uploadFile = new File(fileUploadPath + \"/\" + fileUUID);\r\n\r\n        String md5 = SecureUtil.md5(file.getInputStream());\r\n        String url;\r\n        Files files = iFilesService.getFileByMd5(md5);\r\n        if(files != null){\r\n            url = files.getUrl();\r\n        }\r\n        else {\r\n            file.transferTo(uploadFile);\r\n            url = \"http://\" + serverAddress + \":\" + serverPort + \"/file?id=\" + fileUUID;\r\n        }\r\n        Files saveFile = new Files(uuId, originalFilename, type, md5, url, uid, DateTimeUtils.getNowTimeString(), false, true);\r\n        iFilesService.save(saveFile);\r\n        return url;\r\n    }\r\n\r\n    @GetMapping(\"\")\r\n    @ApiOperation(value = \"获取文件内容\")\r\n    public String getFileContent(@RequestParam(\"id\") String id) throws Exception{ //流请求还是字符串请求？\r\n        if(\"\".equals(id)){\r\n            return \"\";\r\n        }\r\n        String path = fileUploadPath + \"/\" + id;\r\n        File file = new File(path);\r\n        return FileUtils.readFileToString(file, \"utf-8\");\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/nju/boot/controller/FilesController.java b/backend/src/main/java/com/nju/boot/controller/FilesController.java
--- a/backend/src/main/java/com/nju/boot/controller/FilesController.java	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
+++ b/backend/src/main/java/com/nju/boot/controller/FilesController.java	(date 1688888692897)
@@ -5,6 +5,7 @@
 import cn.hutool.crypto.SecureUtil;
 import com.nju.boot.entity.Files;
 import com.nju.boot.graphs.cfg.CFG;
+import com.nju.boot.handler.DisableBaseResponse;
 import com.nju.boot.mapper.FilesMapper;
 import com.nju.boot.service.IFilesService;
 import com.nju.boot.service.impl.FilesServiceImpl;
@@ -53,7 +54,7 @@
 
     @PostMapping("")
     @ApiOperation(value = "上传文件")
-    public String uploadFile(@RequestParam("uid") String uid, MultipartFile file) throws Exception {
+    public Files uploadFile(@RequestBody String uid, @RequestBody MultipartFile file) throws Exception {
         if(file == null) throw new Exception("请求参数缺失");
         if(file.isEmpty()){
             throw new Exception("上传失败，请选择文件");
@@ -81,7 +82,7 @@
         }
         Files saveFile = new Files(uuId, originalFilename, type, md5, url, uid, DateTimeUtils.getNowTimeString(), false, true);
         iFilesService.save(saveFile);
-        return url;
+        return saveFile;
     }
 
     @GetMapping("")
Index: backend/target/classes/joaut.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : test\r\nSource Server Version : 80031\r\nSource Host           : localhost:3306\r\nSource Database       : joaut\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80031\r\nFile Encoding         : 65001\r\n\r\nDate: 2023-06-08 23:30:27\r\n*/\r\n\r\nSET NAMES utf8mb4;\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n\r\nDROP TABLE IF EXISTS `j_user`;\r\nCREATE TABLE `j_user` (\r\n  `id` varchar(255) NOT NULL COMMENT '用户编号',\r\n  `username` varchar(255) NOT NULL COMMENT '用户名称(唯一)',\r\n  `password` varchar(255) NOT NULL COMMENT '用户密码(密文存储)',\r\n  `phone_number` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '用户电话号码',\r\n  `email` varchar(255) DEFAULT NULL COMMENT '用户邮箱',\r\n  `update_at` datetime NOT NULL COMMENT '最近登录日期',\r\n  `status` int NOT NULL DEFAULT '0' COMMENT '用户状态，0表示正常，1表示被禁',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\r\n\r\n\r\nDROP TABLE IF EXISTS `j_file`;\r\nDROP TABLE IF EXISTS `j_files`;\r\nCREATE TABLE `j_files` (\r\n  `id` varchar(255) NOT NULL COMMENT '编号',\r\n  `name` varchar(255) NOT NULL COMMENT '文件名',\r\n  `type` varchar(255) DEFAULT NULL COMMENT '文件类型',\r\n  `md5` varchar(255) DEFAULT NULL COMMENT 'MD5值',\r\n  `url` varchar(255) NOT NULL COMMENT '下载链接',\r\n  `upload_time` datetime NOT NULL COMMENT '上传时间',\r\n  `deleted` tinyint(1) DEFAULT '0' COMMENT '是否删除',\r\n  `enable` tinyint(1) DEFAULT '1' COMMENT '是否禁用链接',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/target/classes/joaut.sql b/backend/target/classes/joaut.sql
--- a/backend/target/classes/joaut.sql	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
+++ b/backend/target/classes/joaut.sql	(date 1688881271212)
@@ -24,7 +24,7 @@
   `password` varchar(255) NOT NULL COMMENT '用户密码(密文存储)',
   `phone_number` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL COMMENT '用户电话号码',
   `email` varchar(255) DEFAULT NULL COMMENT '用户邮箱',
-  `update_at` datetime NOT NULL COMMENT '最近登录日期',
+  `update_at` varchar(25) NOT NULL COMMENT '最近登录日期',
   `status` int NOT NULL DEFAULT '0' COMMENT '用户状态，0表示正常，1表示被禁',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
@@ -38,7 +38,8 @@
   `type` varchar(255) DEFAULT NULL COMMENT '文件类型',
   `md5` varchar(255) DEFAULT NULL COMMENT 'MD5值',
   `url` varchar(255) NOT NULL COMMENT '下载链接',
-  `upload_time` datetime NOT NULL COMMENT '上传时间',
+  `uid` varchar(255) NOT NULL COMMENT '用户编号',
+  `upload_time` varchar(25) NOT NULL COMMENT '上传时间',
   `deleted` tinyint(1) DEFAULT '0' COMMENT '是否删除',
   `enable` tinyint(1) DEFAULT '1' COMMENT '是否禁用链接',
   PRIMARY KEY (`id`)
Index: backend/src/main/java/com/nju/boot/controller/GraphController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nju.boot.controller;\r\n\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.CallableDeclaration;\r\nimport com.nju.boot.slicer.Graphs;\r\nimport com.nju.boot.util.SlicerUtil;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Set;\r\n\r\n@RestController\r\n@RequestMapping(\"/graph\")\r\n@Api(tags = \"Java文件解析成代码抽象模型接口\")\r\npublic class GraphController {\r\n\r\n    @Value(\"${files.upload.path}\")\r\n    private String fileUploadPath;\r\n\r\n    @GetMapping(\"/ast\")\r\n    @ApiOperation(value = \"获得语法分析树AST\")\r\n    public String getAST(@RequestParam(\"id\") String id){\r\n        String path = fileUploadPath + \"/\" + id;\r\n        Graphs graphs = new Graphs(path);\r\n        return SlicerUtil.astNodeToXml(graphs.getCu());\r\n    }\r\n\r\n    @GetMapping(\"/cg\")\r\n    @ApiOperation(value = \"获得函数调用图Call graph\")\r\n    public String getCallGraph(@RequestParam(\"id\") String id){\r\n        String path = fileUploadPath + \"/\" + id;\r\n        Graphs graphs = new Graphs(path);\r\n        return graphs.getCallGraph().toString();\r\n    }\r\n\r\n    @GetMapping(\"/method\")\r\n    @ApiOperation(value = \"获得文件的所有方法\")\r\n    public Set<String> getMethod(@RequestParam(\"id\") String id){\r\n        String path = fileUploadPath + \"/\" + id;\r\n        Graphs graphs = new Graphs(path);\r\n        return graphs.getQualifiedSignatures();\r\n    }\r\n\r\n    @GetMapping(\"/cfg\")\r\n    @ApiOperation(value = \"获得控制流程图CFG\")\r\n    public String getCFG(String id, String method){\r\n        String path = fileUploadPath + \"/\" + id;\r\n        Graphs graphs = new Graphs(path);\r\n        if(method == null){\r\n            Set<String> methods = graphs.getQualifiedSignatures();\r\n            method = methods.stream().toList().get(0);\r\n        }\r\n        return graphs.getCFG(SlicerUtil.findMethodBySignature(graphs, method)).toString();\r\n    }\r\n\r\n    @GetMapping(\"/pdg\")\r\n    @ApiOperation(value = \"获得程序依赖图PDG\")\r\n    public String getPDG(String id, String method){\r\n        String path = fileUploadPath + \"/\" + id;\r\n        Graphs graphs = new Graphs(path);\r\n        if(method == null){\r\n            Set<String> methods = graphs.getQualifiedSignatures();\r\n            method = methods.stream().toList().get(0);\r\n        }\r\n        return graphs.getPDG(SlicerUtil.findMethodBySignature(graphs, method)).toString();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/nju/boot/controller/GraphController.java b/backend/src/main/java/com/nju/boot/controller/GraphController.java
--- a/backend/src/main/java/com/nju/boot/controller/GraphController.java	(revision d9c558c7cfdc51bc2959ccc3a088b51d236c4b1e)
+++ b/backend/src/main/java/com/nju/boot/controller/GraphController.java	(date 1688887239580)
@@ -2,6 +2,7 @@
 
 import com.github.javaparser.ast.CompilationUnit;
 import com.github.javaparser.ast.body.CallableDeclaration;
+import com.nju.boot.handler.DisableBaseResponse;
 import com.nju.boot.slicer.Graphs;
 import com.nju.boot.util.SlicerUtil;
 import io.swagger.annotations.Api;
@@ -19,6 +20,7 @@
     @Value("${files.upload.path}")
     private String fileUploadPath;
 
+    @DisableBaseResponse
     @GetMapping("/ast")
     @ApiOperation(value = "获得语法分析树AST")
     public String getAST(@RequestParam("id") String id){
@@ -27,6 +29,7 @@
         return SlicerUtil.astNodeToXml(graphs.getCu());
     }
 
+    @DisableBaseResponse
     @GetMapping("/cg")
     @ApiOperation(value = "获得函数调用图Call graph")
     public String getCallGraph(@RequestParam("id") String id){
@@ -35,6 +38,7 @@
         return graphs.getCallGraph().toString();
     }
 
+    @DisableBaseResponse
     @GetMapping("/method")
     @ApiOperation(value = "获得文件的所有方法")
     public Set<String> getMethod(@RequestParam("id") String id){
@@ -43,6 +47,7 @@
         return graphs.getQualifiedSignatures();
     }
 
+    @DisableBaseResponse
     @GetMapping("/cfg")
     @ApiOperation(value = "获得控制流程图CFG")
     public String getCFG(String id, String method){
@@ -55,6 +60,7 @@
         return graphs.getCFG(SlicerUtil.findMethodBySignature(graphs, method)).toString();
     }
 
+    @DisableBaseResponse
     @GetMapping("/pdg")
     @ApiOperation(value = "获得程序依赖图PDG")
     public String getPDG(String id, String method){
